/* tslint:disable */
/* eslint-disable */
/**
 * api-supercharger
 * REST API Supercharger
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ognjen.bostjancic@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Bar
 */
export interface Bar {
    /**
     * 
     * @type {number}
     * @memberof Bar
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Bar
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Bar
     */
    updated?: string;
    /**
     * 
     * @type {number}
     * @memberof Bar
     */
    temp: number;
}
/**
 * 
 * @export
 * @interface CreateManyBarDto
 */
export interface CreateManyBarDto {
    /**
     * 
     * @type {Array<Bar>}
     * @memberof CreateManyBarDto
     */
    bulk: Array<Bar>;
}
/**
 * 
 * @export
 * @interface CreateManyFooDto
 */
export interface CreateManyFooDto {
    /**
     * 
     * @type {Array<Foo>}
     * @memberof CreateManyFooDto
     */
    bulk: Array<Foo>;
}
/**
 * 
 * @export
 * @interface Foo
 */
export interface Foo {
    /**
     * 
     * @type {number}
     * @memberof Foo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Foo
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Foo
     */
    updated?: string;
    /**
     * 
     * @type {string}
     * @memberof Foo
     */
    name: string;
}
/**
 * 
 * @export
 * @interface GetManyBarResponseDto
 */
export interface GetManyBarResponseDto {
    /**
     * 
     * @type {Array<Bar>}
     * @memberof GetManyBarResponseDto
     */
    data: Array<Bar>;
    /**
     * 
     * @type {number}
     * @memberof GetManyBarResponseDto
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyBarResponseDto
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyBarResponseDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyBarResponseDto
     */
    pageCount: number;
}
/**
 * 
 * @export
 * @interface GetManyFooResponseDto
 */
export interface GetManyFooResponseDto {
    /**
     * 
     * @type {Array<Foo>}
     * @memberof GetManyFooResponseDto
     */
    data: Array<Foo>;
    /**
     * 
     * @type {number}
     * @memberof GetManyFooResponseDto
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyFooResponseDto
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyFooResponseDto
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof GetManyFooResponseDto
     */
    pageCount: number;
}

/**
 * BarApi - axios parameter creator
 * @export
 */
export const BarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBar: async (bar: Bar, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bar' is not null or undefined
            assertParamExists('createBar', 'bar', bar)
            const localVarPath = `/api/bars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bar, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateManyBarDto} createManyBarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBars: async (createManyBarDto: CreateManyBarDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createManyBarDto' is not null or undefined
            assertParamExists('createBars', 'createManyBarDto', createManyBarDto)
            const localVarPath = `/api/bars/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createManyBarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBar: async (id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBar', 'id', id)
            const localVarPath = `/api/bars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBars: async (fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/bars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }

            if (or) {
                localVarQueryParameter['or'] = or;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBar: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeBar', 'id', id)
            const localVarPath = `/api/bars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBar: async (id: number, bar: Bar, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceBar', 'id', id)
            // verify required parameter 'bar' is not null or undefined
            assertParamExists('replaceBar', 'bar', bar)
            const localVarPath = `/api/bars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bar, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBar: async (id: number, bar: Bar, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBar', 'id', id)
            // verify required parameter 'bar' is not null or undefined
            assertParamExists('updateBar', 'bar', bar)
            const localVarPath = `/api/bars/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bar, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BarApi - functional programming interface
 * @export
 */
export const BarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBar(bar: Bar, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBar(bar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateManyBarDto} createManyBarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBars(createManyBarDto: CreateManyBarDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bar>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBars(createManyBarDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBar(id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBar(id, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBars(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyBarResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBars(fields, s, filter, or, sort, join, limit, offset, page, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBar(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBar(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceBar(id: number, bar: Bar, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceBar(id, bar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBar(id: number, bar: Bar, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBar(id, bar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BarApi - factory interface
 * @export
 */
export const BarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BarApiFp(configuration)
    return {
        /**
         * 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBar(bar: Bar, options?: any): AxiosPromise<Bar> {
            return localVarFp.createBar(bar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateManyBarDto} createManyBarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBars(createManyBarDto: CreateManyBarDto, options?: any): AxiosPromise<Array<Bar>> {
            return localVarFp.createBars(createManyBarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBar(id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<Bar> {
            return localVarFp.getBar(id, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBars(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): AxiosPromise<GetManyBarResponseDto> {
            return localVarFp.getBars(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBar(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeBar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceBar(id: number, bar: Bar, options?: any): AxiosPromise<Bar> {
            return localVarFp.replaceBar(id, bar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Bar} bar 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBar(id: number, bar: Bar, options?: any): AxiosPromise<Bar> {
            return localVarFp.updateBar(id, bar, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBar operation in BarApi.
 * @export
 * @interface BarApiCreateBarRequest
 */
export interface BarApiCreateBarRequest {
    /**
     * 
     * @type {Bar}
     * @memberof BarApiCreateBar
     */
    readonly bar: Bar
}

/**
 * Request parameters for createBars operation in BarApi.
 * @export
 * @interface BarApiCreateBarsRequest
 */
export interface BarApiCreateBarsRequest {
    /**
     * 
     * @type {CreateManyBarDto}
     * @memberof BarApiCreateBars
     */
    readonly createManyBarDto: CreateManyBarDto
}

/**
 * Request parameters for getBar operation in BarApi.
 * @export
 * @interface BarApiGetBarRequest
 */
export interface BarApiGetBarRequest {
    /**
     * 
     * @type {number}
     * @memberof BarApiGetBar
     */
    readonly id: number

    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBar
     */
    readonly fields?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBar
     */
    readonly join?: Array<string>

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof BarApiGetBar
     */
    readonly cache?: number
}

/**
 * Request parameters for getBars operation in BarApi.
 * @export
 * @interface BarApiGetBarsRequest
 */
export interface BarApiGetBarsRequest {
    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBars
     */
    readonly fields?: Array<string>

    /**
     * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {string}
     * @memberof BarApiGetBars
     */
    readonly s?: string

    /**
     * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBars
     */
    readonly filter?: Array<string>

    /**
     * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBars
     */
    readonly or?: Array<string>

    /**
     * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBars
     */
    readonly sort?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof BarApiGetBars
     */
    readonly join?: Array<string>

    /**
     * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof BarApiGetBars
     */
    readonly limit?: number

    /**
     * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof BarApiGetBars
     */
    readonly offset?: number

    /**
     * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof BarApiGetBars
     */
    readonly page?: number

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof BarApiGetBars
     */
    readonly cache?: number
}

/**
 * Request parameters for removeBar operation in BarApi.
 * @export
 * @interface BarApiRemoveBarRequest
 */
export interface BarApiRemoveBarRequest {
    /**
     * 
     * @type {number}
     * @memberof BarApiRemoveBar
     */
    readonly id: number
}

/**
 * Request parameters for replaceBar operation in BarApi.
 * @export
 * @interface BarApiReplaceBarRequest
 */
export interface BarApiReplaceBarRequest {
    /**
     * 
     * @type {number}
     * @memberof BarApiReplaceBar
     */
    readonly id: number

    /**
     * 
     * @type {Bar}
     * @memberof BarApiReplaceBar
     */
    readonly bar: Bar
}

/**
 * Request parameters for updateBar operation in BarApi.
 * @export
 * @interface BarApiUpdateBarRequest
 */
export interface BarApiUpdateBarRequest {
    /**
     * 
     * @type {number}
     * @memberof BarApiUpdateBar
     */
    readonly id: number

    /**
     * 
     * @type {Bar}
     * @memberof BarApiUpdateBar
     */
    readonly bar: Bar
}

/**
 * BarApi - object-oriented interface
 * @export
 * @class BarApi
 * @extends {BaseAPI}
 */
export class BarApi extends BaseAPI {
    /**
     * 
     * @param {BarApiCreateBarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public createBar(requestParameters: BarApiCreateBarRequest, options?: any) {
        return BarApiFp(this.configuration).createBar(requestParameters.bar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiCreateBarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public createBars(requestParameters: BarApiCreateBarsRequest, options?: any) {
        return BarApiFp(this.configuration).createBars(requestParameters.createManyBarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiGetBarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public getBar(requestParameters: BarApiGetBarRequest, options?: any) {
        return BarApiFp(this.configuration).getBar(requestParameters.id, requestParameters.fields, requestParameters.join, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiGetBarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public getBars(requestParameters: BarApiGetBarsRequest = {}, options?: any) {
        return BarApiFp(this.configuration).getBars(requestParameters.fields, requestParameters.s, requestParameters.filter, requestParameters.or, requestParameters.sort, requestParameters.join, requestParameters.limit, requestParameters.offset, requestParameters.page, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiRemoveBarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public removeBar(requestParameters: BarApiRemoveBarRequest, options?: any) {
        return BarApiFp(this.configuration).removeBar(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiReplaceBarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public replaceBar(requestParameters: BarApiReplaceBarRequest, options?: any) {
        return BarApiFp(this.configuration).replaceBar(requestParameters.id, requestParameters.bar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BarApiUpdateBarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarApi
     */
    public updateBar(requestParameters: BarApiUpdateBarRequest, options?: any) {
        return BarApiFp(this.configuration).updateBar(requestParameters.id, requestParameters.bar, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FooApi - axios parameter creator
 * @export
 */
export const FooApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFoo: async (foo: Foo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'foo' is not null or undefined
            assertParamExists('createFoo', 'foo', foo)
            const localVarPath = `/api/foos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateManyFooDto} createManyFooDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFoos: async (createManyFooDto: CreateManyFooDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createManyFooDto' is not null or undefined
            assertParamExists('createFoos', 'createManyFooDto', createManyFooDto)
            const localVarPath = `/api/foos/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createManyFooDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fooControllerBreakStuff: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/foos/break`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoo: async (id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFoo', 'id', id)
            const localVarPath = `/api/foos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoos: async (fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/foos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields) {
                localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (filter) {
                localVarQueryParameter['filter'] = filter;
            }

            if (or) {
                localVarQueryParameter['or'] = or;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (join) {
                localVarQueryParameter['join'] = join;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (cache !== undefined) {
                localVarQueryParameter['cache'] = cache;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFoo: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFoo', 'id', id)
            const localVarPath = `/api/foos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFoo: async (id: number, foo: Foo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceFoo', 'id', id)
            // verify required parameter 'foo' is not null or undefined
            assertParamExists('replaceFoo', 'foo', foo)
            const localVarPath = `/api/foos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoo: async (id: number, foo: Foo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFoo', 'id', id)
            // verify required parameter 'foo' is not null or undefined
            assertParamExists('updateFoo', 'foo', foo)
            const localVarPath = `/api/foos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(foo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FooApi - functional programming interface
 * @export
 */
export const FooApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FooApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFoo(foo: Foo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Foo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFoo(foo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateManyFooDto} createManyFooDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFoos(createManyFooDto: CreateManyFooDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Foo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFoos(createManyFooDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fooControllerBreakStuff(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fooControllerBreakStuff(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoo(id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Foo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoo(id, fields, join, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoos(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyFooResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoos(fields, s, filter, or, sort, join, limit, offset, page, cache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFoo(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFoo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceFoo(id: number, foo: Foo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Foo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceFoo(id, foo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFoo(id: number, foo: Foo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Foo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFoo(id, foo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FooApi - factory interface
 * @export
 */
export const FooApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FooApiFp(configuration)
    return {
        /**
         * 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFoo(foo: Foo, options?: any): AxiosPromise<Foo> {
            return localVarFp.createFoo(foo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateManyFooDto} createManyFooDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFoos(createManyFooDto: CreateManyFooDto, options?: any): AxiosPromise<Array<Foo>> {
            return localVarFp.createFoos(createManyFooDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fooControllerBreakStuff(options?: any): AxiosPromise<void> {
            return localVarFp.fooControllerBreakStuff(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoo(id: number, fields?: Array<string>, join?: Array<string>, cache?: number, options?: any): AxiosPromise<Foo> {
            return localVarFp.getFoo(id, fields, join, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoos(fields?: Array<string>, s?: string, filter?: Array<string>, or?: Array<string>, sort?: Array<string>, join?: Array<string>, limit?: number, offset?: number, page?: number, cache?: number, options?: any): AxiosPromise<GetManyFooResponseDto> {
            return localVarFp.getFoos(fields, s, filter, or, sort, join, limit, offset, page, cache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFoo(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeFoo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceFoo(id: number, foo: Foo, options?: any): AxiosPromise<Foo> {
            return localVarFp.replaceFoo(id, foo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Foo} foo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoo(id: number, foo: Foo, options?: any): AxiosPromise<Foo> {
            return localVarFp.updateFoo(id, foo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFoo operation in FooApi.
 * @export
 * @interface FooApiCreateFooRequest
 */
export interface FooApiCreateFooRequest {
    /**
     * 
     * @type {Foo}
     * @memberof FooApiCreateFoo
     */
    readonly foo: Foo
}

/**
 * Request parameters for createFoos operation in FooApi.
 * @export
 * @interface FooApiCreateFoosRequest
 */
export interface FooApiCreateFoosRequest {
    /**
     * 
     * @type {CreateManyFooDto}
     * @memberof FooApiCreateFoos
     */
    readonly createManyFooDto: CreateManyFooDto
}

/**
 * Request parameters for getFoo operation in FooApi.
 * @export
 * @interface FooApiGetFooRequest
 */
export interface FooApiGetFooRequest {
    /**
     * 
     * @type {number}
     * @memberof FooApiGetFoo
     */
    readonly id: number

    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoo
     */
    readonly fields?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoo
     */
    readonly join?: Array<string>

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof FooApiGetFoo
     */
    readonly cache?: number
}

/**
 * Request parameters for getFoos operation in FooApi.
 * @export
 * @interface FooApiGetFoosRequest
 */
export interface FooApiGetFoosRequest {
    /**
     * Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoos
     */
    readonly fields?: Array<string>

    /**
     * Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {string}
     * @memberof FooApiGetFoos
     */
    readonly s?: string

    /**
     * Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoos
     */
    readonly filter?: Array<string>

    /**
     * Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoos
     */
    readonly or?: Array<string>

    /**
     * Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoos
     */
    readonly sort?: Array<string>

    /**
     * Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {Array<string>}
     * @memberof FooApiGetFoos
     */
    readonly join?: Array<string>

    /**
     * Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof FooApiGetFoos
     */
    readonly limit?: number

    /**
     * Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof FooApiGetFoos
     */
    readonly offset?: number

    /**
     * Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof FooApiGetFoos
     */
    readonly page?: number

    /**
     * Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @type {number}
     * @memberof FooApiGetFoos
     */
    readonly cache?: number
}

/**
 * Request parameters for removeFoo operation in FooApi.
 * @export
 * @interface FooApiRemoveFooRequest
 */
export interface FooApiRemoveFooRequest {
    /**
     * 
     * @type {number}
     * @memberof FooApiRemoveFoo
     */
    readonly id: number
}

/**
 * Request parameters for replaceFoo operation in FooApi.
 * @export
 * @interface FooApiReplaceFooRequest
 */
export interface FooApiReplaceFooRequest {
    /**
     * 
     * @type {number}
     * @memberof FooApiReplaceFoo
     */
    readonly id: number

    /**
     * 
     * @type {Foo}
     * @memberof FooApiReplaceFoo
     */
    readonly foo: Foo
}

/**
 * Request parameters for updateFoo operation in FooApi.
 * @export
 * @interface FooApiUpdateFooRequest
 */
export interface FooApiUpdateFooRequest {
    /**
     * 
     * @type {number}
     * @memberof FooApiUpdateFoo
     */
    readonly id: number

    /**
     * 
     * @type {Foo}
     * @memberof FooApiUpdateFoo
     */
    readonly foo: Foo
}

/**
 * FooApi - object-oriented interface
 * @export
 * @class FooApi
 * @extends {BaseAPI}
 */
export class FooApi extends BaseAPI {
    /**
     * 
     * @param {FooApiCreateFooRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public createFoo(requestParameters: FooApiCreateFooRequest, options?: any) {
        return FooApiFp(this.configuration).createFoo(requestParameters.foo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiCreateFoosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public createFoos(requestParameters: FooApiCreateFoosRequest, options?: any) {
        return FooApiFp(this.configuration).createFoos(requestParameters.createManyFooDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public fooControllerBreakStuff(options?: any) {
        return FooApiFp(this.configuration).fooControllerBreakStuff(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiGetFooRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public getFoo(requestParameters: FooApiGetFooRequest, options?: any) {
        return FooApiFp(this.configuration).getFoo(requestParameters.id, requestParameters.fields, requestParameters.join, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiGetFoosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public getFoos(requestParameters: FooApiGetFoosRequest = {}, options?: any) {
        return FooApiFp(this.configuration).getFoos(requestParameters.fields, requestParameters.s, requestParameters.filter, requestParameters.or, requestParameters.sort, requestParameters.join, requestParameters.limit, requestParameters.offset, requestParameters.page, requestParameters.cache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiRemoveFooRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public removeFoo(requestParameters: FooApiRemoveFooRequest, options?: any) {
        return FooApiFp(this.configuration).removeFoo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiReplaceFooRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public replaceFoo(requestParameters: FooApiReplaceFooRequest, options?: any) {
        return FooApiFp(this.configuration).replaceFoo(requestParameters.id, requestParameters.foo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FooApiUpdateFooRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FooApi
     */
    public updateFoo(requestParameters: FooApiUpdateFooRequest, options?: any) {
        return FooApiFp(this.configuration).updateFoo(requestParameters.id, requestParameters.foo, options).then((request) => request(this.axios, this.basePath));
    }
}


